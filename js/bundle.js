(()=>{"use strict";function e(e,t,n){const r=n.value;return{configurable:!0,enumerable:!1,get(){return r.bind(this)}}}var t;!function(e){e[e.ACTIVE=0]="ACTIVE",e[e.FINISHIED=1]="FINISHIED"}(t||(t={}));class n{constructor(e,t,n,r,s){this.id=e,this.title=t,this.description=n,this.people=r,this.status=s}}class r{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}class s extends r{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new s),this.instance}addProject(e,r,s){const i=Math.random().toString(),l=new n(i,e,r,s,t.ACTIVE);this.projects.push(l),this.updatedListeners()}moveProject(e,t){const n=this.projects.find((t=>t.id===e));n&&n.status!==t&&(n.status=t,this.updatedListeners())}deleteProject(e){this.projects=this.projects.filter((t=>t.id!==e)),this.updatedListeners()}updatedListeners(){for(const e of this.listeners)e(this.projects.slice())}}const i=s.getInstance();function l(e){return e.required&&0===e.value.toString().length?"Value is required.":null!=e.minLength&&"string"==typeof e.value&&e.value.length<e.minLength?`Character should have a minimum length of ${e.minLength}.`:null!=e.maxLength&&"string"==typeof e.value&&e.value.length>e.maxLength?`Character should have a maximum length of ${e.maxLength}.`:null!=e.min&&"number"==typeof+e.value&&+e.value<e.min?`Participants should be greater than or equal to ${e.min}.`:null!=e.max&&"number"==typeof+e.value&&+e.value>e.max?`Participants should be less than or equal to ${e.max}.`:""}class o{constructor(e,t,n,r){this.templateId=e,this.hostElementId=t,this.insertAtStart=n,this.newElementId=r,this.templateElement=document.getElementById(this.templateId),this.hostElement=document.getElementById(this.hostElementId);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,this.newElementId&&(this.element.id=this.newElementId),this.attach()}attach(){this.hostElement.insertAdjacentElement(this.insertAtStart?"afterbegin":"beforeend",this.element)}}class a extends o{constructor(){super("project-input","app",!0,"user-input"),this.titleInputElement=this.element.querySelector("#title"),this.descriptionInputElement=this.element.querySelector("#description"),this.peopleInputElement=this.element.querySelector("#people"),this.titleErrorElement=this.element.querySelector("#title_error"),this.descriptionErrorElement=this.element.querySelector("#description_error"),this.peopleErrorElement=this.element.querySelector("#people_error"),this.configure()}configure(){this.element.addEventListener("submit",this.submitHandler)}renderContent(){}gatherUserInput(){const e=this.titleInputElement.value.trim(),t=this.descriptionInputElement.value.trim(),n=this.peopleInputElement.value.trim(),r={value:e,required:!0,minLength:4,maxLength:10},s={value:t,required:!0,minLength:4,maxLength:10},i={value:n,required:!0,min:0,max:5};if(!(l(r)||l(s)||l(i)))return[e,t,+n];this.showInputsError(l(r),l(s),l(i))}showInputsError(e,t,n){this.cleanErrors(),e&&(this.titleErrorElement.textContent=e),t&&(this.descriptionErrorElement.textContent=t),n&&(this.peopleErrorElement.textContent=n)}cleanErrors(){this.titleErrorElement.textContent="",this.descriptionErrorElement.textContent="",this.peopleErrorElement.textContent=""}clearInputs(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,n,r]=t;i.addProject(e,n,r),this.clearInputs(),this.cleanErrors()}}}!function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);i>3&&l&&Object.defineProperty(t,n,l)}([e],a.prototype,"submitHandler",null);var c=function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);return i>3&&l&&Object.defineProperty(t,n,l),l};class d extends o{constructor(e,t){super("single-project",e,!1,t.id),this.TouchMoveHandler=e=>{if(e.preventDefault(),d.selectedItem){const t=e.touches[0],n=t.clientX,r=t.clientY;d.selectedItem.style.left=n+"px",d.selectedItem.style.top=r+"px";const s=document.getElementById("active-projects-list"),i=document.getElementById("finished-projects-list");s.classList.remove("droppable"),i.classList.remove("droppable");const l=document.elementFromPoint(n,r),o=s.contains(l),a=i.contains(l);o?s.classList.add("droppable"):a&&i.classList.add("droppable")}},this.project=t,this.configure(),this.renderContent()}get person(){return 1===this.project.people?`Participants: ${this.project.people.toString()} person assigned.`:`Participants: ${this.project.people.toString()} people assigned.`}dragStartHandler(e){if(e instanceof DragEvent&&(e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"),e instanceof TouchEvent){const t=e.target;if("BUTTON"===t.tagName);else if("LI"!==t.tagName){const e=t.parentElement.parentElement.id.split("-")[0];d.status=e,d.selectedItem=t.parentElement}else{const e=t.parentElement.id.split("-")[0];d.status=e,d.selectedItem=t}d.selectedItem&&(d.selectedItem.style.height=d.selectedItem.clientHeight.toString(),d.selectedItem.style.width=d.selectedItem.clientWidth.toString(),d.selectedItem.style.position="fixed",d.selectedItem.style.zIndex="-10")}}dragEndHandler(e){}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("touchstart",this.dragStartHandler),this.element.addEventListener("touchmove",this.TouchMoveHandler),this.element.addEventListener("dragend",this.dragEndHandler),this.element.querySelector("button").addEventListener("click",this.deleteItem)}renderContent(){this.element.querySelector("h2").textContent=`Title: ${this.project.title}`,this.element.querySelector("h3").textContent=this.person,this.element.querySelector("button").textContent="Delete",this.element.querySelector("button").id=this.project.id,this.element.querySelector("p").textContent=`Description:  ${this.project.description}`}deleteItem(){i.deleteProject(this.project.id)}}c([e],d.prototype,"dragStartHandler",null),c([e],d.prototype,"deleteItem",null);var h=function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);return i>3&&l&&Object.defineProperty(t,n,l),l};class p extends o{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.assignProjects=[],this.configure(),this.renderContent()}dragOverHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dropHandler(e){if(e instanceof DragEvent){const n=e.dataTransfer.getData("text/plain");i.moveProject(n,"active"===this.type?t.ACTIVE:t.FINISHIED)}if(e instanceof TouchEvent&&d.selectedItem){document.querySelectorAll("ul").forEach((function(e){e.classList.remove("droppable")}));var n=document.elementFromPoint(e.changedTouches[0].clientX,e.changedTouches[0].clientY);if(n&&"UL"===n.tagName){n.appendChild(d.selectedItem);const e=d.selectedItem.id,r="active"===d.status?t.FINISHIED:t.ACTIVE;i.moveProject(e,r)}if(n&&"LI"===n.tagName){n.parentElement.insertBefore(d.selectedItem,n.nextSibling);const e=d.selectedItem.id,r="active"===d.status?t.FINISHIED:t.ACTIVE;i.moveProject(e,r)}d.selectedItem.style.left="",d.selectedItem.style.top="",d.selectedItem.style.height="",d.selectedItem.style.width="",d.selectedItem.style.position="",d.selectedItem.style.zIndex=""}}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("touchend",this.dropHandler),this.element.addEventListener("drop",this.dropHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),i.addListener((e=>{const n=e.filter((e=>"active"===this.type?e.status===t.ACTIVE:e.status===t.FINISHIED));this.assignProjects=n,this.renderProjects()}))}renderContent(){const e=`${this.type}-projects-list`;this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=`${this.type} projects`.toUpperCase()}renderProjects(){document.getElementById(`${this.type}-projects-list`).innerHTML="";for(const e of this.assignProjects)new d(this.element.querySelector("ul").id,e)}}h([e],p.prototype,"dragOverHandler",null),h([e],p.prototype,"dropHandler",null),h([e],p.prototype,"dragLeaveHandler",null),new a,new p("active"),new p("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,