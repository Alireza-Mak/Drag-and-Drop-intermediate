(()=>{"use strict";function e(e,t,r){const n=r.value;return{configurable:!0,enumerable:!1,get(){return n.bind(this)}}}var t;!function(e){e[e.ACTIVE=0]="ACTIVE",e[e.FINISHIED=1]="FINISHIED"}(t||(t={}));class r{constructor(e,t,r,n,s){this.id=e,this.title=t,this.description=r,this.people=n,this.status=s}}class n{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}class s extends n{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new s),this.instance}addProject(e,n,s){const i=Math.random().toString(),o=new r(i,e,n,s,t.ACTIVE);this.projects.push(o),this.updatedListeners()}moveProject(e,t){const r=this.projects.find((t=>t.id===e));r&&r.status!==t&&(r.status=t,this.updatedListeners())}deleteProject(e){this.projects=this.projects.filter((t=>t.id!==e)),this.updatedListeners()}updatedListeners(){for(const e of this.listeners)e(this.projects.slice())}}const i=s.getInstance();function o(e){return e.required&&0===e.value.toString().length?"Value is required.":null!=e.minLength&&"string"==typeof e.value&&e.value.length<e.minLength?`Character should have a minimum length of ${e.minLength}.`:null!=e.maxLength&&"string"==typeof e.value&&e.value.length>e.maxLength?`Character should have a maximum length of ${e.maxLength}.`:null!=e.min&&"number"==typeof+e.value&&+e.value<e.min?`Participants should be greater than or equal to ${e.min}.`:null!=e.max&&"number"==typeof+e.value&&+e.value>e.max?`Participants should be less than or equal to ${e.max}.`:""}class l{constructor(e,t,r,n){this.templateId=e,this.hostElementId=t,this.insertAtStart=r,this.newElementId=n,this.templateElement=document.getElementById(this.templateId),this.hostElement=document.getElementById(this.hostElementId);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,this.newElementId&&(this.element.id=this.newElementId),this.attach()}attach(){this.hostElement.insertAdjacentElement(this.insertAtStart?"afterbegin":"beforeend",this.element)}}class a extends l{constructor(){super("project-input","app",!0,"user-input"),this.titleInputElement=this.element.querySelector("#title"),this.descriptionInputElement=this.element.querySelector("#description"),this.peopleInputElement=this.element.querySelector("#people"),this.titleErrorElement=this.element.querySelector("#title_error"),this.descriptionErrorElement=this.element.querySelector("#description_error"),this.peopleErrorElement=this.element.querySelector("#people_error"),this.configure()}configure(){this.element.addEventListener("submit",this.submitHandler)}renderContent(){}gatherUserInput(){const e=this.titleInputElement.value.trim(),t=this.descriptionInputElement.value.trim(),r=this.peopleInputElement.value.trim(),n={value:e,required:!0,minLength:4,maxLength:10},s={value:t,required:!0,minLength:4,maxLength:10},i={value:r,required:!0,min:0,max:5};if(!(o(n)||o(s)||o(i)))return[e,t,+r];this.showInputsError(o(n),o(s),o(i))}showInputsError(e,t,r){this.cleanErrors(),e&&(this.titleErrorElement.textContent=e),t&&(this.descriptionErrorElement.textContent=t),r&&(this.peopleErrorElement.textContent=r)}cleanErrors(){this.titleErrorElement.textContent="",this.descriptionErrorElement.textContent="",this.peopleErrorElement.textContent=""}clearInputs(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,r,n]=t;i.addProject(e,r,n),this.clearInputs(),this.cleanErrors()}}}!function(e,t,r,n){var s,i=arguments.length,o=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,r,o):s(t,r))||o);i>3&&o&&Object.defineProperty(t,r,o)}([e],a.prototype,"submitHandler",null);var c=function(e,t,r,n){var s,i=arguments.length,o=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,r,o):s(t,r))||o);return i>3&&o&&Object.defineProperty(t,r,o),o};class h extends l{constructor(e,t){super("single-project",e,!1,t.id),this.project=t,this.configure(),this.renderContent()}get person(){return 1===this.project.people?`Participants: ${this.project.people.toString()} person assigned.`:`Participants: ${this.project.people.toString()} people assigned.`}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler),this.element.querySelector("button").addEventListener("click",this.deleteItem)}renderContent(){this.element.querySelector("h2").textContent=`Title: ${this.project.title}`,this.element.querySelector("h3").textContent=this.person,this.element.querySelector("button").textContent="Delete",this.element.querySelector("button").id=this.project.id,this.element.querySelector("p").textContent=`Description:  ${this.project.description}`}deleteItem(){i.deleteProject(this.project.id)}}c([e],h.prototype,"dragStartHandler",null),c([e],h.prototype,"deleteItem",null);var d=function(e,t,r,n){var s,i=arguments.length,o=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,r,o):s(t,r))||o);return i>3&&o&&Object.defineProperty(t,r,o),o};class p extends l{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.assignProjects=[],this.configure(),this.renderContent()}dragOverHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dropHandler(e){const r=e.dataTransfer.getData("text/plain");i.moveProject(r,"active"===this.type?t.ACTIVE:t.FINISHIED)}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("drop",this.dropHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),i.addListener((e=>{const r=e.filter((e=>"active"===this.type?e.status===t.ACTIVE:e.status===t.FINISHIED));this.assignProjects=r,this.renderProjects()}))}renderContent(){const e=`${this.type}-projects-list`;this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=`${this.type} projects`.toUpperCase()}renderProjects(){document.getElementById(`${this.type}-projects-list`).innerHTML="";for(const e of this.assignProjects)new h(this.element.querySelector("ul").id,e)}}d([e],p.prototype,"dragOverHandler",null),d([e],p.prototype,"dropHandler",null),d([e],p.prototype,"dragLeaveHandler",null),new a,new p("active"),new p("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,